services:
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: secret

  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: signaldb
      POSTGRES_USER: signaldb
      POSTGRES_PASSWORD: password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U signaldb"]
      interval: 30s
      timeout: 10s
      retries: 3

  signaldb-writer:
    build:
      context: .
      dockerfile: Dockerfile
      target: writer
    image: signaldb/writer:latest
    environment:
      SIGNALDB_DATABASE_DSN: "postgres://signaldb:password@postgres:5432/signaldb"
      SIGNALDB_DISCOVERY_DSN: "postgres://signaldb:password@postgres:5432/signaldb"
      WRITER_FLIGHT_ADDR: "0.0.0.0:50051"
      WRITER_ADVERTISE_ADDR: "signaldb-writer:50051"
      # WAL persistence configuration - mounted to persistent volume
      WRITER_WAL_DIR: "/data/wal"
      # S3/MinIO storage configuration
      SIGNALDB_STORAGE_DSN: "s3://signaldb/data"
      AWS_ENDPOINT_URL: "http://minio:9000"
      AWS_ACCESS_KEY_ID: "minioadmin"
      AWS_SECRET_ACCESS_KEY: "minioadmin"
      AWS_REGION: "us-east-1"
      AWS_ALLOW_HTTP: "true"
    volumes:
      # Persistent WAL storage to survive container restarts
      - writer-wal:/data/wal
    ports:
      - "50051:50051"
    depends_on:
      postgres:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50051"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'

  signaldb-acceptor:
    build:
      context: .
      dockerfile: Dockerfile
      target: acceptor
    image: signaldb/acceptor:latest
    environment:
      SIGNALDB_DATABASE_DSN: "postgres://signaldb:password@postgres:5432/signaldb"
      SIGNALDB_DISCOVERY_DSN: "postgres://signaldb:password@postgres:5432/signaldb"
      ACCEPTOR_GRPC_ADDR: "0.0.0.0:4317"
      ACCEPTOR_HTTP_ADDR: "0.0.0.0:4318"
      # WAL persistence for acceptor durability
      ACCEPTOR_WAL_DIR: "/data/wal"
    volumes:
      - acceptor-wal:/data/wal
    ports:
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "4317"]
      interval: 30s
      timeout: 10s
      retries: 3

  signaldb-querier:
    build:
      context: .
      dockerfile: Dockerfile
      target: querier
    image: signaldb/querier:latest
    environment:
      SIGNALDB_DATABASE_DSN: "postgres://signaldb:password@postgres:5432/signaldb"
      SIGNALDB_DISCOVERY_DSN: "postgres://signaldb:password@postgres:5432/signaldb"
      QUERIER_FLIGHT_ADDR: "0.0.0.0:50054"
      QUERIER_ADVERTISE_ADDR: "signaldb-querier:50054"
      # S3/MinIO storage configuration
      SIGNALDB_STORAGE_DSN: "s3://signaldb/data"
      AWS_ENDPOINT_URL: "http://minio:9000"
      AWS_ACCESS_KEY_ID: "minioadmin"
      AWS_SECRET_ACCESS_KEY: "minioadmin"
      AWS_REGION: "us-east-1"
      AWS_ALLOW_HTTP: "true"
    ports:
      - "50054:50054"
    depends_on:
      postgres:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully

  signaldb-router:
    build:
      context: .
      dockerfile: Dockerfile
      target: router
    image: signaldb/router:latest
    environment:
      SIGNALDB_DATABASE_DSN: "postgres://signaldb:password@postgres:5432/signaldb"
      SIGNALDB_DISCOVERY_DSN: "postgres://signaldb:password@postgres:5432/signaldb"
      ROUTER_FLIGHT_ADDR: "0.0.0.0:50053"
      ROUTER_HTTP_ADDR: "0.0.0.0:3001"
    ports:
      - "50053:50053"  # Flight
      - "3001:3001"    # HTTP API
    depends_on:
      postgres:
        condition: service_healthy

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"    # MinIO API
      - "9001:9001"    # MinIO Console
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 minioadmin minioadmin;
      mc mb minio/signaldb --ignore-existing;
      mc anonymous set download minio/signaldb;
      echo 'MinIO bucket signaldb created successfully';
      "
    restart: "no"

volumes:
  postgres-data:
  # Persistent WAL storage - critical for durability
  writer-wal:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/writer-wal
  acceptor-wal:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/acceptor-wal
  # MinIO object storage - stores all Parquet data
  minio-data:
