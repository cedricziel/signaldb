name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short # Changed from 1 to short for better performance
  CARGO_INCREMENTAL: 0 # Disable incremental compilation for CI
  CARGO_NET_RETRY: 10

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Fast preliminary checks - fail fast strategy
  check:
    name: Check & Lint
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4

      - name: Init submodules
        run: git submodule update --init --recursive

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy
          cache: true

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "check"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler mold clang

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Cargo check
        run: cargo check --all-targets --all-features

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      # Cache compiled dependencies for other jobs
      - name: Compress target for sharing
        run: tar -czf target-deps.tar.gz target/

      - name: Upload target artifact
        uses: actions/upload-artifact@v4
        with:
          name: target-deps-${{ github.run_id }}
          path: target-deps.tar.gz
          retention-days: 1

  # Parallel test matrix - depends on check passing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: check
    strategy:
      fail-fast: false
      matrix:
        rust: [stable, beta, 1.85.0] # Test with stable, beta, and MSRV

    steps:
      - uses: actions/checkout@v4

      - name: Init submodules
        run: git submodule update --init --recursive

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          cache: true

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "test-${{ matrix.rust }}"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler mold clang

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      # Download pre-compiled dependencies
      - name: Download target artifact
        uses: actions/download-artifact@v4
        with:
          name: target-deps-${{ github.run_id }}

      - name: Extract target directory
        run: tar -xzf target-deps.tar.gz

      - name: Setup test environment
        run: |
          mkdir -p .data
          # Tests use testcontainers - no need for external database configuration

      - name: Run all tests
        run: |
          export RUSTC_WRAPPER=sccache
          cargo test --profile ci-test --workspace --all-features
        env:
          RUST_LOG: warn # Reduced log level for faster tests
          RUST_BACKTRACE: 1

  # Build jobs - only run after tests pass
  build-binaries:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    needs: [check, test]
    strategy:
      matrix:
        include:
          # Reduced matrix - only build what you actually deploy
          - os: ubuntu-latest
            deployment: monolithic
          - os: ubuntu-latest
            deployment: microservices
          # Only add macOS if you actually need macOS binaries
          - os: macos-latest
            deployment: monolithic

    steps:
      - uses: actions/checkout@v4

      - name: Init submodules
        run: git submodule update --init --recursive

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: true

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "build-${{ matrix.os }}"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler mold clang

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install protobuf

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Build binaries
        run: |
          export RUSTC_WRAPPER=sccache
          if [ "${{ matrix.deployment }}" = "monolithic" ]; then
            cargo build --release -p signaldb-bin --bin signaldb
          else
            cargo build --release -p acceptor --bin signaldb-acceptor
            cargo build --release -p router --bin signaldb-router
            cargo build --release -p writer --bin signaldb-writer
            cargo build --release -p querier --bin signaldb-querier
          fi

      - name: Test binary execution
        run: |
          if [ "${{ matrix.deployment }}" = "monolithic" ]; then
            ./target/release/signaldb --help
            ./target/release/signaldb --version
          else
            ./target/release/signaldb-acceptor --help
            ./target/release/signaldb-acceptor --version
            ./target/release/signaldb-router --help
            ./target/release/signaldb-router --version
            ./target/release/signaldb-writer --help
            ./target/release/signaldb-writer --version
            ./target/release/signaldb-querier --help
            ./target/release/signaldb-querier --version
          fi

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.deployment }}
          path: target/release/signaldb*
          retention-days: 7

  # Lightweight deployment test - only essential combinations
  deployment-test:
    name: Deployment Test
    runs-on: ubuntu-latest
    needs: build-binaries
    strategy:
      matrix:
        deployment: [monolithic, microservices]

    steps:
      - uses: actions/checkout@v4

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: binaries-ubuntu-latest-${{ matrix.deployment }}
          path: target/release/

      - name: Make binaries executable
        run: chmod +x target/release/signaldb*

      - name: Configure environment
        run: |
          # Create writable data directory
          mkdir -p ${{ runner.temp }}/signaldb-data
          chmod 755 ${{ runner.temp }}/signaldb-data

          # Use SQLite for deployment testing (faster and more reliable)
          echo "SIGNALDB_DATABASE_DSN=sqlite://${{ runner.temp }}/signaldb-data/test_deployment.db" >> $GITHUB_ENV
          echo "SIGNALDB_DISCOVERY_DSN=sqlite://${{ runner.temp }}/signaldb-data/test_deployment.db" >> $GITHUB_ENV
          echo "SIGNALDB_STORAGE_DSN=file://${{ runner.temp }}/signaldb-data/storage" >> $GITHUB_ENV

      - name: Test deployment
        run: |
          if [ "${{ matrix.deployment }}" = "monolithic" ]; then
            timeout 5s ./target/release/signaldb || echo "Monolithic test completed"
          else
            timeout 3s ./target/release/signaldb-acceptor &
            timeout 3s ./target/release/signaldb-router &
            timeout 3s ./target/release/signaldb-writer &
            wait
            echo "Microservices test completed"
          fi

  # Security and coverage jobs - run in parallel with tests
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: check
    steps:
      - uses: actions/checkout@v4

      - name: Init submodules
        run: git submodule update --init --recursive

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: true

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Install security tools
        run: |
          export RUSTC_WRAPPER=sccache
          cargo install cargo-audit cargo-deny cargo-machete

      - name: Run security audit
        run: cargo audit

      - name: Run cargo deny
        run: cargo deny check

      - name: Check for unused dependencies
        run: cargo machete --with-metadata

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: check
    # Only run coverage on main branch or when specifically requested
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'coverage')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: signaldb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Init submodules
        run: git submodule update --init --recursive

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: llvm-tools-preview
          cache: true

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "coverage"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler mold clang

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov

      - name: Setup environment
        run: |
          mkdir -p .data
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/signaldb_test" >> $GITHUB_ENV
          echo "SIGNALDB_DATABASE_DSN=postgres://postgres:postgres@localhost:5432/signaldb_test" >> $GITHUB_ENV
          echo "SIGNALDB_DISCOVERY_DSN=postgres://postgres:postgres@localhost:5432/signaldb_test" >> $GITHUB_ENV

      - name: Generate coverage report
        run: |
          export RUSTC_WRAPPER=sccache
          cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          fail_ci_if_error: false
