name: CI

on:
  push:
    branches: [main, ingest-advertisement]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable, beta]
        database: [postgresql, sqlite]
        include:
          # Test with minimum supported Rust version
          - os: ubuntu-latest
            rust: 1.82.0
            database: sqlite

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: signaldb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Init submodules
        run: git submodule update --init --recursive

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.rust }}-${{ matrix.database }}
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install protobuf

      - name: Configure database environment
        run: |
          if [ "${{ matrix.database }}" = "postgresql" ]; then
            echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/signaldb_test" >> $GITHUB_ENV
            echo "SIGNALDB_DATABASE_DSN=postgres://postgres:postgres@localhost:5432/signaldb_test" >> $GITHUB_ENV
          else
            echo "DATABASE_URL=sqlite://.data/test.db" >> $GITHUB_ENV
            echo "SIGNALDB_DATABASE_DSN=sqlite://.data/test.db" >> $GITHUB_ENV
          fi

      - name: Create data directory
        run: mkdir -p .data

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run unit tests
        run: cargo test --lib --all-features

      - name: Run integration tests
        run: cargo test --test '*' --all-features
        env:
          RUST_LOG: info

      - name: Run workspace tests
        run: cargo test --workspace --all-features
        env:
          RUST_LOG: info

  build-binaries:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        deployment: [monolithic, microservices]

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install protobuf

      - name: Build monolithic binary
        if: matrix.deployment == 'monolithic'
        run: cargo build --release --bin signaldb

      - name: Build microservice binaries
        if: matrix.deployment == 'microservices'
        run: |
          cargo build --release -p acceptor --bin signaldb-acceptor
          cargo build --release -p router --bin signaldb-router
          cargo build --release -p writer --bin signaldb-writer

      - name: Test binary execution (monolithic)
        if: matrix.deployment == 'monolithic'
        run: |
          ./target/release/signaldb --help

      - name: Test binary execution (microservices)
        if: matrix.deployment == 'microservices'
        run: |
          ./target/release/signaldb-acceptor --help || echo "SignalDB Acceptor binary startup test (expected to show config info)"
          ./target/release/signaldb-router --help || echo "SignalDB Router binary startup test (expected to show config info)"
          ./target/release/signaldb-writer --help || echo "SignalDB Writer binary startup test (expected to show config info)"

  deployment-test:
    name: Deployment Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        database: [postgresql, sqlite]
        deployment: [monolithic, microservices]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: signaldb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Configure environment
        run: |
          mkdir -p .data
          if [ "${{ matrix.database }}" = "postgresql" ]; then
            echo "SIGNALDB_DATABASE_DSN=postgres://postgres:postgres@localhost:5432/signaldb_test" >> $GITHUB_ENV
            echo "SIGNALDB_DISCOVERY_DSN=postgres://postgres:postgres@localhost:5432/signaldb_test" >> $GITHUB_ENV
          else
            echo "SIGNALDB_DATABASE_DSN=sqlite://.data/test_deployment.db" >> $GITHUB_ENV
            echo "SIGNALDB_DISCOVERY_DSN=sqlite://.data/test_deployment.db" >> $GITHUB_ENV
          fi

      - name: Build binaries
        run: |
          if [ "${{ matrix.deployment }}" = "monolithic" ]; then
            cargo build --release --bin signaldb
          else
            cargo build --release -p acceptor --bin signaldb-acceptor
            cargo build --release -p router --bin signaldb-router
            cargo build --release -p writer --bin signaldb-writer
          fi

      - name: Test deployment configuration
        run: |
          if [ "${{ matrix.deployment }}" = "monolithic" ]; then
            echo "Testing monolithic deployment with ${{ matrix.database }}"
            timeout 5s ./target/release/signaldb || echo "Monolithic startup test completed"
          else
            echo "Testing microservices deployment with ${{ matrix.database }}"
            timeout 3s ./target/release/signaldb-acceptor &
            timeout 3s ./target/release/signaldb-router &
            timeout 3s ./target/release/signaldb-writer &
            wait
            echo "Microservices startup test completed"
          fi

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Run cargo deny
        run: |
          cargo install cargo-deny
          cargo deny check

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: signaldb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov

      - name: Setup environment
        run: |
          mkdir -p .data
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/signaldb_test" >> $GITHUB_ENV
          echo "SIGNALDB_DATABASE_DSN=postgres://postgres:postgres@localhost:5432/signaldb_test" >> $GITHUB_ENV

      - name: Generate coverage report
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: false
