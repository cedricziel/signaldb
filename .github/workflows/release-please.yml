name: Release Please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: Run release-please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.MY_RELEASE_PLEASE_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

  build-release:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_suffix: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_suffix: ".exe"

    steps:
      - uses: actions/checkout@v4

      - name: Init submodules
        run: git submodule update --init --recursive

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.target }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install protobuf

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install protoc

      - name: Build release binaries
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Package binaries
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release

          # Create directories for different deployment models
          mkdir -p signaldb-monolithic-${{ matrix.target }}
          mkdir -p signaldb-microservices-${{ matrix.target }}

          # Package monolithic deployment
          cp signaldb${{ matrix.binary_suffix }} signaldb-monolithic-${{ matrix.target }}/
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a signaldb-monolithic-${{ matrix.target }}.zip signaldb-monolithic-${{ matrix.target }}/
          else
            tar czf signaldb-monolithic-${{ matrix.target }}.tar.gz signaldb-monolithic-${{ matrix.target }}/
          fi

          # Package microservices deployment
          cp signaldb-acceptor${{ matrix.binary_suffix }} signaldb-microservices-${{ matrix.target }}/
          cp signaldb-router${{ matrix.binary_suffix }} signaldb-microservices-${{ matrix.target }}/
          cp signaldb-writer${{ matrix.binary_suffix }} signaldb-microservices-${{ matrix.target }}/
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a signaldb-microservices-${{ matrix.target }}.zip signaldb-microservices-${{ matrix.target }}/
          else
            tar czf signaldb-microservices-${{ matrix.target }}.tar.gz signaldb-microservices-${{ matrix.target }}/
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/signaldb-monolithic-${{ matrix.target }}.*
            target/${{ matrix.target }}/release/signaldb-microservices-${{ matrix.target }}.*

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release-please.outputs.tag_name }}

      - name: Create Dockerfile
        run: |
          cat > Dockerfile.monolithic << 'EOF'
          FROM rust:1.75 as builder

          RUN apt-get update && apt-get install -y protobuf-compiler

          WORKDIR /app
          COPY . .

          RUN cargo build --release --bin signaldb

          FROM debian:bookworm-slim

          RUN apt-get update && apt-get install -y \
              ca-certificates \
              && rm -rf /var/lib/apt/lists/*

          COPY --from=builder /app/target/release/signaldb /usr/local/bin/signaldb

          EXPOSE 4317 4318 50051 3000

          CMD ["signaldb"]
          EOF

      - name: Build and push monolithic image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.monolithic
          platforms: linux/amd64,linux/arm64
          push: ${{ secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  upload-assets:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: [release-please, build-release, docker-build]
    if: ${{ needs.release-please.outputs.release_created }}

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          draft: false
          prerelease: ${{ contains(needs.release-please.outputs.tag_name, 'alpha') || contains(needs.release-please.outputs.tag_name, 'beta') || contains(needs.release-please.outputs.tag_name, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
