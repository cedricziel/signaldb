# SignalDB Distribution Configuration
# Copy to signaldb.toml and adjust for your environment

[database]
# Database for internal metadata storage
dsn = "sqlite://.data/signaldb.db"
# dsn = "postgres://user:password@localhost/signaldb"

[auth]
# Multi-Tenancy Authentication Configuration
# Controls API key validation and tenant isolation
enabled = true  # Set to false to disable authentication (dev/testing only)

# Tenant definitions with API keys and datasets
# Each tenant is isolated with separate WAL paths and Iceberg catalogs

# Example tenant: Acme Corporation
[[auth.tenants]]
id = "acme"
name = "Acme Corporation"
default_dataset = "production"  # Used when X-Dataset-ID header is not provided

# API keys for the Acme tenant
# Each key can have a descriptive name for auditing
[[auth.tenants.api_keys]]
key = "sk-acme-prod-key-123"       # The actual API key used in Authorization: Bearer header
name = "Production Key"             # Human-readable name for this key

[[auth.tenants.api_keys]]
key = "sk-acme-staging-key-456"
name = "Staging Key"

# Datasets for the Acme tenant
# Tenants can have multiple datasets for environment isolation
[[auth.tenants.datasets]]
id = "production"
is_default = true

[[auth.tenants.datasets]]
id = "staging"
is_default = false

# Example tenant: Beta Inc
[[auth.tenants]]
id = "beta"
name = "Beta Inc"
default_dataset = "default"

[[auth.tenants.api_keys]]
key = "sk-beta-key-789"
name = "Beta Production Key"

[[auth.tenants.datasets]]
id = "default"
is_default = true

# Optional: Custom schema configuration per tenant
# [[auth.tenants.schema_config]]
# catalog_type = "sql"
# catalog_uri = "sqlite://.data/acme_catalog.db"

# Authentication Headers Required:
# - Authorization: Bearer <api-key>
# - X-Tenant-ID: <tenant-id>
# - X-Dataset-ID: <dataset-id> (optional, uses default_dataset if not provided)
#
# Example authenticated OTLP request:
#   curl -X POST http://localhost:4318/v1/traces \
#     -H "Authorization: Bearer sk-acme-prod-key-123" \
#     -H "X-Tenant-ID: acme" \
#     -H "X-Dataset-ID: production" \
#     -H "Content-Type: application/json" \
#     -d @traces.json

[storage]
# Object storage for data files (Parquet, etc.)
dsn = "file:///.data/storage"
# dsn = "memory://"                    # In-memory storage for testing
# dsn = "s3://my-bucket/signaldb/"     # S3 storage (future)

[schema]
# Iceberg catalog configuration for table metadata
catalog_type = "sql"                   # sql (recommended) or memory
catalog_uri = "sqlite::memory:"        # In-memory SQLite catalog
# catalog_uri = "sqlite://.data/catalog.db"  # Persistent SQLite catalog
# catalog_uri = "postgres://user:password@localhost:5432/iceberg"  # Production PostgreSQL

# Default schemas to create for new tenants
[schema.default_schemas]
traces_enabled = true
logs_enabled = true
metrics_enabled = true

# Custom schema definitions (optional)
# [schema.default_schemas.custom_schemas]
# my_custom_table = '''{"fields": [...]}'''

# Advanced Iceberg Configuration (all settings are optional and auto-optimized)
# These provide fine-grained control for specialized workloads

# [schema.optimization]
# # Batch processing optimization (automatic by default)
# max_rows_per_batch = 50000           # Maximum rows per batch before splitting
# max_memory_per_batch_mb = 128        # Maximum memory per batch in MB
# enable_auto_split = true             # Automatically split oversized batches
# target_concurrent_batches = 4        # Number of batches to process concurrently
# 
# # Catalog caching for performance (enabled by default)
# enable_catalog_caching = true        # Cache catalog connections
# catalog_cache_ttl_seconds = 300      # Cache TTL in seconds (5 minutes)
#
# # Connection pooling for production (automatic by default)
# min_connections = 2                  # Minimum pool connections
# max_connections = 10                 # Maximum pool connections
# connection_timeout_ms = 5000         # Connection timeout
# idle_timeout_seconds = 300           # Idle connection timeout
# max_lifetime_seconds = 1800          # Connection max lifetime
#
# # Retry logic for reliability (enabled by default)
# max_retry_attempts = 3               # Maximum retry attempts
# initial_retry_delay_ms = 100         # Initial retry delay
# max_retry_delay_seconds = 5          # Maximum retry delay
# retry_backoff_multiplier = 2.0       # Exponential backoff multiplier

[discovery]
# Service discovery configuration
dsn = "sqlite::memory:"               # In-memory service registry
heartbeat_interval = "30s"
poll_interval = "60s"
ttl = "300s"

[wal]
# Write-Ahead Log configuration
wal_dir = ".data/wal"
max_segment_size = 67108864           # 64MB
max_buffer_entries = 1000
flush_interval = "30s"
max_buffer_size_bytes = 134217728     # 128MB

[tenants]
# Multi-tenant configuration (always active)
default_tenant = "default"

# Example tenant configuration
# [tenants.tenants.tenant1]
# enabled = true
# [tenants.tenants.tenant1.schema]
# catalog_type = "sql"
# catalog_uri = "sqlite://.data/tenant1_catalog.db"
# [tenants.tenants.tenant1.custom_schemas]
# traces = "custom_traces_schema_definition"
# logs = "custom_logs_schema_definition"

# Environment variable examples:
# SIGNALDB_DATABASE_DSN=postgres://user:pass@localhost/signaldb
# SIGNALDB_STORAGE_DSN=file:///data/signaldb
# SIGNALDB_SCHEMA_CATALOG_TYPE=sql
# SIGNALDB_SCHEMA_CATALOG_URI=postgres://user:pass@localhost:5432/iceberg
# SIGNALDB_TENANTS_DEFAULT_TENANT=my_tenant

# Production environment example with Iceberg:
# SIGNALDB_DATABASE_DSN=postgres://signaldb:password@postgres:5432/signaldb_metadata
# SIGNALDB_STORAGE_DSN=s3://my-data-bucket/iceberg-tables/
# SIGNALDB_SCHEMA_CATALOG_TYPE=sql  
# SIGNALDB_SCHEMA_CATALOG_URI=postgres://iceberg:password@postgres:5432/iceberg_catalog