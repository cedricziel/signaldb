// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TraceByIdRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub trace_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "2")]
    pub block_start: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub block_end: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub query_mode: ::prost::alloc::string::String,
    #[prost(bool, tag = "6")]
    pub allow_partial_trace: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TraceByIdResponse {
    #[prost(message, optional, tag = "1")]
    pub trace: ::core::option::Option<Trace>,
    #[prost(message, optional, tag = "2")]
    pub metrics: ::core::option::Option<TraceByIdMetrics>,
    #[prost(enumeration = "trace_by_id_response::Status", tag = "3")]
    pub status: i32,
    #[prost(string, tag = "4")]
    pub message: ::prost::alloc::string::String,
}
/// Nested message and enum types in `TraceByIDResponse`.
pub mod trace_by_id_response {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Status {
        Complete = 0,
        Partial = 1,
    }
    impl Status {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Complete => "COMPLETE",
                Self::Partial => "PARTIAL",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "COMPLETE" => Some(Self::Complete),
                "PARTIAL" => Some(Self::Partial),
                _ => None,
            }
        }
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TraceByIdMetrics {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchRequest {
    #[prost(map = "string, string", tag = "1")]
    pub tags: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(uint32, tag = "2")]
    pub min_duration_ms: u32,
    #[prost(uint32, tag = "3")]
    pub max_duration_ms: u32,
    #[prost(uint32, tag = "4")]
    pub limit: u32,
    #[prost(uint32, tag = "5")]
    pub start: u32,
    #[prost(uint32, tag = "6")]
    pub end: u32,
    #[prost(string, tag = "8")]
    pub query: ::prost::alloc::string::String,
    #[prost(uint32, tag = "9")]
    pub spans_per_span_set: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchBlockRequest {
    #[prost(message, optional, tag = "1")]
    pub search_req: ::core::option::Option<SearchRequest>,
    #[prost(string, tag = "2")]
    pub block_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub start_page: u32,
    #[prost(uint32, tag = "4")]
    pub pages_to_search: u32,
    #[prost(string, tag = "5")]
    pub encoding: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub index_page_size: u32,
    #[prost(uint32, tag = "7")]
    pub total_records: u32,
    #[prost(string, tag = "8")]
    pub data_encoding: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub version: ::prost::alloc::string::String,
    #[prost(uint64, tag = "10")]
    pub size: u64,
    #[prost(uint32, tag = "11")]
    pub footer_size: u32,
    #[prost(message, repeated, tag = "12")]
    pub dedicated_columns: ::prost::alloc::vec::Vec<DedicatedColumn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DedicatedColumn {
    #[prost(enumeration = "dedicated_column::Scope", tag = "3")]
    pub scope: i32,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration = "dedicated_column::Type", tag = "1")]
    pub r#type: i32,
}
/// Nested message and enum types in `DedicatedColumn`.
pub mod dedicated_column {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Scope {
        Span = 0,
        Resource = 1,
    }
    impl Scope {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Span => "SPAN",
                Self::Resource => "RESOURCE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "SPAN" => Some(Self::Span),
                "RESOURCE" => Some(Self::Resource),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Type {
        String = 0,
    }
    impl Type {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::String => "STRING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STRING" => Some(Self::String),
                _ => None,
            }
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchResponse {
    #[prost(message, repeated, tag = "1")]
    pub traces: ::prost::alloc::vec::Vec<TraceSearchMetadata>,
    #[prost(message, optional, tag = "2")]
    pub metrics: ::core::option::Option<SearchMetrics>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TraceSearchMetadata {
    #[prost(string, tag = "1")]
    pub trace_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub root_service_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub root_trace_name: ::prost::alloc::string::String,
    #[prost(uint64, tag = "4")]
    pub start_time_unix_nano: u64,
    #[prost(uint32, tag = "5")]
    pub duration_ms: u32,
    #[prost(message, optional, tag = "6")]
    pub span_set: ::core::option::Option<SpanSet>,
    #[prost(message, repeated, tag = "7")]
    pub span_sets: ::prost::alloc::vec::Vec<SpanSet>,
    #[prost(map = "string, message", tag = "8")]
    pub service_stats: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ServiceStats,
    >,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ServiceStats {
    #[prost(uint32, tag = "1")]
    pub span_count: u32,
    #[prost(uint32, tag = "2")]
    pub error_count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpanSet {
    #[prost(message, repeated, tag = "1")]
    pub spans: ::prost::alloc::vec::Vec<Span>,
    #[prost(uint32, tag = "2")]
    pub matched: u32,
    #[prost(message, repeated, tag = "3")]
    pub attributes: ::prost::alloc::vec::Vec<common::v1::KeyValue>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Span {
    #[prost(string, tag = "1")]
    pub span_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub start_time_unix_nano: u64,
    #[prost(uint64, tag = "4")]
    pub duration_nanos: u64,
    #[prost(message, repeated, tag = "5")]
    pub attributes: ::prost::alloc::vec::Vec<common::v1::KeyValue>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SearchMetrics {
    #[prost(uint32, tag = "1")]
    pub inspected_traces: u32,
    #[prost(uint64, tag = "2")]
    pub inspected_bytes: u64,
    #[prost(uint32, tag = "3")]
    pub total_blocks: u32,
    #[prost(uint32, tag = "4")]
    pub completed_jobs: u32,
    #[prost(uint32, tag = "5")]
    pub total_jobs: u32,
    #[prost(uint64, tag = "6")]
    pub total_block_bytes: u64,
    #[prost(uint64, tag = "7")]
    pub inspected_spans: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchTagsRequest {
    #[prost(string, tag = "1")]
    pub scope: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub query: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub start: u32,
    #[prost(uint32, tag = "4")]
    pub end: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchTagsBlockRequest {
    #[prost(message, optional, tag = "1")]
    pub search_req: ::core::option::Option<SearchTagsRequest>,
    #[prost(string, tag = "2")]
    pub block_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub start_page: u32,
    #[prost(uint32, tag = "4")]
    pub pages_to_search: u32,
    #[prost(string, tag = "5")]
    pub encoding: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub index_page_size: u32,
    #[prost(uint32, tag = "7")]
    pub total_records: u32,
    #[prost(string, tag = "8")]
    pub data_encoding: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub version: ::prost::alloc::string::String,
    #[prost(uint64, tag = "10")]
    pub size: u64,
    #[prost(uint32, tag = "11")]
    pub footer_size: u32,
    #[prost(message, repeated, tag = "12")]
    pub dedicated_columns: ::prost::alloc::vec::Vec<DedicatedColumn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchTagValuesBlockRequest {
    #[prost(message, optional, tag = "1")]
    pub search_req: ::core::option::Option<SearchTagValuesRequest>,
    #[prost(string, tag = "2")]
    pub block_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub start_page: u32,
    #[prost(uint32, tag = "4")]
    pub pages_to_search: u32,
    #[prost(string, tag = "5")]
    pub encoding: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub index_page_size: u32,
    #[prost(uint32, tag = "7")]
    pub total_records: u32,
    #[prost(string, tag = "8")]
    pub data_encoding: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub version: ::prost::alloc::string::String,
    #[prost(uint64, tag = "10")]
    pub size: u64,
    #[prost(uint32, tag = "11")]
    pub footer_size: u32,
    #[prost(message, repeated, tag = "12")]
    pub dedicated_columns: ::prost::alloc::vec::Vec<DedicatedColumn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchTagsResponse {
    #[prost(string, repeated, tag = "1")]
    pub tag_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "2")]
    pub metrics: ::core::option::Option<MetadataMetrics>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchTagsV2Response {
    #[prost(message, repeated, tag = "1")]
    pub scopes: ::prost::alloc::vec::Vec<SearchTagsV2Scope>,
    #[prost(message, optional, tag = "2")]
    pub metrics: ::core::option::Option<MetadataMetrics>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchTagsV2Scope {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchTagValuesRequest {
    #[prost(string, tag = "1")]
    pub tag_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub query: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub start: u32,
    #[prost(uint32, tag = "5")]
    pub end: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchTagValuesResponse {
    #[prost(string, repeated, tag = "1")]
    pub tag_values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "2")]
    pub metrics: ::core::option::Option<MetadataMetrics>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TagValue {
    #[prost(string, tag = "1")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub value: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchTagValuesV2Response {
    #[prost(message, repeated, tag = "1")]
    pub tag_values: ::prost::alloc::vec::Vec<TagValue>,
    #[prost(message, optional, tag = "2")]
    pub metrics: ::core::option::Option<MetadataMetrics>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MetadataMetrics {
    #[prost(uint64, tag = "1")]
    pub inspected_bytes: u64,
    #[prost(uint32, tag = "2")]
    pub total_jobs: u32,
    #[prost(uint32, tag = "3")]
    pub completed_jobs: u32,
    #[prost(uint32, tag = "4")]
    pub total_blocks: u32,
    #[prost(uint64, tag = "5")]
    pub total_block_bytes: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Trace {
    #[prost(message, repeated, tag = "1")]
    pub resource_spans: ::prost::alloc::vec::Vec<trace::v1::ResourceSpans>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PushResponse {
    #[prost(enumeration = "PushErrorReason", repeated, tag = "1")]
    pub errors_by_trace: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PushBytesRequest {
    #[prost(bytes = "vec", repeated, tag = "2")]
    pub traces: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "3")]
    pub ids: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "4")]
    pub search_data: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PushSpansRequest {
    #[prost(message, repeated, tag = "1")]
    pub batches: ::prost::alloc::vec::Vec<trace::v1::ResourceSpans>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TraceBytes {
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub traces: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LinkSlice {
    #[prost(message, repeated, tag = "1")]
    pub links: ::prost::alloc::vec::Vec<trace::v1::span::Link>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpanMetricsRequest {
    #[prost(string, tag = "1")]
    pub query: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub group_by: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub limit: u64,
    #[prost(uint32, tag = "4")]
    pub start: u32,
    #[prost(uint32, tag = "5")]
    pub end: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpanMetricsSummaryRequest {
    #[prost(string, tag = "1")]
    pub query: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub group_by: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub limit: u64,
    #[prost(uint32, tag = "4")]
    pub start: u32,
    #[prost(uint32, tag = "5")]
    pub end: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpanMetricsResponse {
    #[prost(bool, tag = "1")]
    pub estimated: bool,
    #[prost(uint64, tag = "2")]
    pub span_count: u64,
    #[prost(uint64, tag = "3")]
    pub error_span_count: u64,
    #[prost(message, repeated, tag = "4")]
    pub metrics: ::prost::alloc::vec::Vec<SpanMetrics>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RawHistogram {
    #[prost(uint64, tag = "1")]
    pub bucket: u64,
    #[prost(uint64, tag = "2")]
    pub count: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KeyValue {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub value: ::core::option::Option<TraceQlStatic>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpanMetrics {
    #[prost(message, repeated, tag = "1")]
    pub latency_histogram: ::prost::alloc::vec::Vec<RawHistogram>,
    #[prost(message, repeated, tag = "2")]
    pub series: ::prost::alloc::vec::Vec<KeyValue>,
    #[prost(uint64, tag = "3")]
    pub errors: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpanMetricsSummary {
    #[prost(uint64, tag = "1")]
    pub span_count: u64,
    #[prost(uint64, tag = "2")]
    pub error_span_count: u64,
    #[prost(message, repeated, tag = "3")]
    pub series: ::prost::alloc::vec::Vec<KeyValue>,
    #[prost(uint64, tag = "4")]
    pub p99: u64,
    #[prost(uint64, tag = "5")]
    pub p95: u64,
    #[prost(uint64, tag = "6")]
    pub p90: u64,
    #[prost(uint64, tag = "7")]
    pub p50: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpanMetricsSummaryResponse {
    #[prost(message, repeated, tag = "1")]
    pub summaries: ::prost::alloc::vec::Vec<SpanMetricsSummary>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TraceQlStatic {
    #[prost(int32, tag = "1")]
    pub r#type: i32,
    #[prost(int64, tag = "2")]
    pub n: i64,
    #[prost(double, tag = "3")]
    pub f: f64,
    #[prost(string, tag = "4")]
    pub s: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    pub b: bool,
    #[prost(uint64, tag = "6")]
    pub d: u64,
    #[prost(int32, tag = "7")]
    pub status: i32,
    #[prost(int32, tag = "8")]
    pub kind: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpanMetricsData {
    #[prost(string, tag = "1")]
    pub result_type: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub result: ::prost::alloc::vec::Vec<SpanMetricsResult>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpanMetricsResult {
    #[prost(string, tag = "1")]
    pub label_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub label_value: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub ts: ::prost::alloc::vec::Vec<SpanMetricsResultPoint>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpanMetricsResultPoint {
    #[prost(uint32, tag = "1")]
    pub time: u32,
    #[prost(double, tag = "2")]
    pub val: f64,
    #[prost(bytes = "vec", tag = "3")]
    pub exemplar_trace_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "4")]
    pub exemplar_duration: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryInstantRequest {
    #[prost(string, tag = "1")]
    pub query: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub start: u64,
    #[prost(uint64, tag = "3")]
    pub end: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryInstantResponse {
    #[prost(message, repeated, tag = "1")]
    pub series: ::prost::alloc::vec::Vec<InstantSeries>,
    #[prost(message, optional, tag = "2")]
    pub metrics: ::core::option::Option<SearchMetrics>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstantSeries {
    #[prost(message, repeated, tag = "1")]
    pub labels: ::prost::alloc::vec::Vec<common::v1::KeyValue>,
    #[prost(double, tag = "2")]
    pub value: f64,
    #[prost(string, tag = "3")]
    pub prom_labels: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryRangeRequest {
    #[prost(string, tag = "1")]
    pub query: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub start: u64,
    #[prost(uint64, tag = "3")]
    pub end: u64,
    #[prost(uint64, tag = "4")]
    pub step: u64,
    #[prost(string, tag = "7")]
    pub query_mode: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub block_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "9")]
    pub start_page: u32,
    #[prost(uint32, tag = "10")]
    pub pages_to_search: u32,
    #[prost(string, tag = "11")]
    pub version: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub encoding: ::prost::alloc::string::String,
    #[prost(uint64, tag = "13")]
    pub size: u64,
    #[prost(uint32, tag = "14")]
    pub footer_size: u32,
    #[prost(message, repeated, tag = "15")]
    pub dedicated_columns: ::prost::alloc::vec::Vec<DedicatedColumn>,
    #[prost(uint32, tag = "16")]
    pub exemplars: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryRangeResponse {
    #[prost(message, repeated, tag = "1")]
    pub series: ::prost::alloc::vec::Vec<TimeSeries>,
    #[prost(message, optional, tag = "2")]
    pub metrics: ::core::option::Option<SearchMetrics>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Exemplar {
    #[prost(message, repeated, tag = "1")]
    pub labels: ::prost::alloc::vec::Vec<common::v1::KeyValue>,
    #[prost(double, tag = "2")]
    pub value: f64,
    #[prost(int64, tag = "3")]
    pub timestamp_ms: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sample {
    #[prost(int64, tag = "2")]
    pub timestamp_ms: i64,
    #[prost(double, tag = "1")]
    pub value: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TimeSeries {
    #[prost(message, repeated, tag = "1")]
    pub labels: ::prost::alloc::vec::Vec<common::v1::KeyValue>,
    #[prost(message, repeated, tag = "2")]
    pub samples: ::prost::alloc::vec::Vec<Sample>,
    #[prost(string, tag = "3")]
    pub prom_labels: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub exemplars: ::prost::alloc::vec::Vec<Exemplar>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PushErrorReason {
    NoError = 0,
    MaxLiveTraces = 1,
    TraceTooLarge = 2,
    UnknownError = 3,
}
impl PushErrorReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::NoError => "NO_ERROR",
            Self::MaxLiveTraces => "MAX_LIVE_TRACES",
            Self::TraceTooLarge => "TRACE_TOO_LARGE",
            Self::UnknownError => "UNKNOWN_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NO_ERROR" => Some(Self::NoError),
            "MAX_LIVE_TRACES" => Some(Self::MaxLiveTraces),
            "TRACE_TOO_LARGE" => Some(Self::TraceTooLarge),
            "UNKNOWN_ERROR" => Some(Self::UnknownError),
            _ => None,
        }
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod pusher_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct PusherClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl PusherClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> PusherClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> PusherClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            PusherClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// different versions of PushBytes expect the trace data to be pushed in
        /// different formats
        pub async fn push_bytes(
            &mut self,
            request: impl tonic::IntoRequest<super::PushBytesRequest>,
        ) -> std::result::Result<tonic::Response<super::PushResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/tempopb.Pusher/PushBytes");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("tempopb.Pusher", "PushBytes"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn push_bytes_v2(
            &mut self,
            request: impl tonic::IntoRequest<super::PushBytesRequest>,
        ) -> std::result::Result<tonic::Response<super::PushResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.Pusher/PushBytesV2",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tempopb.Pusher", "PushBytesV2"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod metrics_generator_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct MetricsGeneratorClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MetricsGeneratorClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MetricsGeneratorClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MetricsGeneratorClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MetricsGeneratorClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn push_spans(
            &mut self,
            request: impl tonic::IntoRequest<super::PushSpansRequest>,
        ) -> std::result::Result<tonic::Response<super::PushResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.MetricsGenerator/PushSpans",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tempopb.MetricsGenerator", "PushSpans"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_metrics(
            &mut self,
            request: impl tonic::IntoRequest<super::SpanMetricsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SpanMetricsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.MetricsGenerator/GetMetrics",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tempopb.MetricsGenerator", "GetMetrics"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn query_range(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryRangeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryRangeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.MetricsGenerator/QueryRange",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tempopb.MetricsGenerator", "QueryRange"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod querier_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct QuerierClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QuerierClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QuerierClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QuerierClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QuerierClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn find_trace_by_id(
            &mut self,
            request: impl tonic::IntoRequest<super::TraceByIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TraceByIdResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.Querier/FindTraceByID",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tempopb.Querier", "FindTraceByID"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn search_recent(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchRequest>,
        ) -> std::result::Result<tonic::Response<super::SearchResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.Querier/SearchRecent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tempopb.Querier", "SearchRecent"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn search_block(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchBlockRequest>,
        ) -> std::result::Result<tonic::Response<super::SearchResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.Querier/SearchBlock",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tempopb.Querier", "SearchBlock"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn search_tags(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchTagsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchTagsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.Querier/SearchTags",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tempopb.Querier", "SearchTags"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn search_tags_v2(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchTagsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchTagsV2Response>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.Querier/SearchTagsV2",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tempopb.Querier", "SearchTagsV2"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn search_tag_values(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchTagValuesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchTagValuesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.Querier/SearchTagValues",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tempopb.Querier", "SearchTagValues"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn search_tag_values_v2(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchTagValuesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchTagValuesV2Response>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.Querier/SearchTagValuesV2",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tempopb.Querier", "SearchTagValuesV2"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod streaming_querier_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct StreamingQuerierClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl StreamingQuerierClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> StreamingQuerierClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> StreamingQuerierClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            StreamingQuerierClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn search(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SearchResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.StreamingQuerier/Search",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tempopb.StreamingQuerier", "Search"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn search_tags(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchTagsRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SearchTagsResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.StreamingQuerier/SearchTags",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tempopb.StreamingQuerier", "SearchTags"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn search_tags_v2(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchTagsRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SearchTagsV2Response>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.StreamingQuerier/SearchTagsV2",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tempopb.StreamingQuerier", "SearchTagsV2"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn search_tag_values(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchTagValuesRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SearchTagValuesResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.StreamingQuerier/SearchTagValues",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tempopb.StreamingQuerier", "SearchTagValues"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn search_tag_values_v2(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchTagValuesRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SearchTagValuesV2Response>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.StreamingQuerier/SearchTagValuesV2",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("tempopb.StreamingQuerier", "SearchTagValuesV2"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn metrics_query_range(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryRangeRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::QueryRangeResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.StreamingQuerier/MetricsQueryRange",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("tempopb.StreamingQuerier", "MetricsQueryRange"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn metrics_query_instant(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryInstantRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::QueryInstantResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.StreamingQuerier/MetricsQueryInstant",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("tempopb.StreamingQuerier", "MetricsQueryInstant"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod metrics_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct MetricsClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MetricsClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MetricsClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MetricsClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MetricsClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn span_metrics_summary(
            &mut self,
            request: impl tonic::IntoRequest<super::SpanMetricsSummaryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SpanMetricsSummaryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.Metrics/SpanMetricsSummary",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tempopb.Metrics", "SpanMetricsSummary"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn query_range(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryRangeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryRangeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tempopb.Metrics/QueryRange",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("tempopb.Metrics", "QueryRange"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod pusher_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with PusherServer.
    #[async_trait]
    pub trait Pusher: std::marker::Send + std::marker::Sync + 'static {
        /// different versions of PushBytes expect the trace data to be pushed in
        /// different formats
        async fn push_bytes(
            &self,
            request: tonic::Request<super::PushBytesRequest>,
        ) -> std::result::Result<tonic::Response<super::PushResponse>, tonic::Status>;
        async fn push_bytes_v2(
            &self,
            request: tonic::Request<super::PushBytesRequest>,
        ) -> std::result::Result<tonic::Response<super::PushResponse>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct PusherServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> PusherServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for PusherServer<T>
    where
        T: Pusher,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/tempopb.Pusher/PushBytes" => {
                    #[allow(non_camel_case_types)]
                    struct PushBytesSvc<T: Pusher>(pub Arc<T>);
                    impl<T: Pusher> tonic::server::UnaryService<super::PushBytesRequest>
                    for PushBytesSvc<T> {
                        type Response = super::PushResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PushBytesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Pusher>::push_bytes(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PushBytesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tempopb.Pusher/PushBytesV2" => {
                    #[allow(non_camel_case_types)]
                    struct PushBytesV2Svc<T: Pusher>(pub Arc<T>);
                    impl<T: Pusher> tonic::server::UnaryService<super::PushBytesRequest>
                    for PushBytesV2Svc<T> {
                        type Response = super::PushResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PushBytesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Pusher>::push_bytes_v2(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PushBytesV2Svc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for PusherServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "tempopb.Pusher";
    impl<T> tonic::server::NamedService for PusherServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod metrics_generator_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MetricsGeneratorServer.
    #[async_trait]
    pub trait MetricsGenerator: std::marker::Send + std::marker::Sync + 'static {
        async fn push_spans(
            &self,
            request: tonic::Request<super::PushSpansRequest>,
        ) -> std::result::Result<tonic::Response<super::PushResponse>, tonic::Status>;
        async fn get_metrics(
            &self,
            request: tonic::Request<super::SpanMetricsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SpanMetricsResponse>,
            tonic::Status,
        >;
        async fn query_range(
            &self,
            request: tonic::Request<super::QueryRangeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryRangeResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct MetricsGeneratorServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MetricsGeneratorServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MetricsGeneratorServer<T>
    where
        T: MetricsGenerator,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/tempopb.MetricsGenerator/PushSpans" => {
                    #[allow(non_camel_case_types)]
                    struct PushSpansSvc<T: MetricsGenerator>(pub Arc<T>);
                    impl<
                        T: MetricsGenerator,
                    > tonic::server::UnaryService<super::PushSpansRequest>
                    for PushSpansSvc<T> {
                        type Response = super::PushResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PushSpansRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetricsGenerator>::push_spans(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PushSpansSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tempopb.MetricsGenerator/GetMetrics" => {
                    #[allow(non_camel_case_types)]
                    struct GetMetricsSvc<T: MetricsGenerator>(pub Arc<T>);
                    impl<
                        T: MetricsGenerator,
                    > tonic::server::UnaryService<super::SpanMetricsRequest>
                    for GetMetricsSvc<T> {
                        type Response = super::SpanMetricsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SpanMetricsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetricsGenerator>::get_metrics(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetMetricsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tempopb.MetricsGenerator/QueryRange" => {
                    #[allow(non_camel_case_types)]
                    struct QueryRangeSvc<T: MetricsGenerator>(pub Arc<T>);
                    impl<
                        T: MetricsGenerator,
                    > tonic::server::UnaryService<super::QueryRangeRequest>
                    for QueryRangeSvc<T> {
                        type Response = super::QueryRangeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryRangeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MetricsGenerator>::query_range(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = QueryRangeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for MetricsGeneratorServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "tempopb.MetricsGenerator";
    impl<T> tonic::server::NamedService for MetricsGeneratorServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod querier_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with QuerierServer.
    #[async_trait]
    pub trait Querier: std::marker::Send + std::marker::Sync + 'static {
        async fn find_trace_by_id(
            &self,
            request: tonic::Request<super::TraceByIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TraceByIdResponse>,
            tonic::Status,
        >;
        async fn search_recent(
            &self,
            request: tonic::Request<super::SearchRequest>,
        ) -> std::result::Result<tonic::Response<super::SearchResponse>, tonic::Status>;
        async fn search_block(
            &self,
            request: tonic::Request<super::SearchBlockRequest>,
        ) -> std::result::Result<tonic::Response<super::SearchResponse>, tonic::Status>;
        async fn search_tags(
            &self,
            request: tonic::Request<super::SearchTagsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchTagsResponse>,
            tonic::Status,
        >;
        async fn search_tags_v2(
            &self,
            request: tonic::Request<super::SearchTagsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchTagsV2Response>,
            tonic::Status,
        >;
        async fn search_tag_values(
            &self,
            request: tonic::Request<super::SearchTagValuesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchTagValuesResponse>,
            tonic::Status,
        >;
        async fn search_tag_values_v2(
            &self,
            request: tonic::Request<super::SearchTagValuesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchTagValuesV2Response>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct QuerierServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> QuerierServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for QuerierServer<T>
    where
        T: Querier,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/tempopb.Querier/FindTraceByID" => {
                    #[allow(non_camel_case_types)]
                    struct FindTraceByIDSvc<T: Querier>(pub Arc<T>);
                    impl<T: Querier> tonic::server::UnaryService<super::TraceByIdRequest>
                    for FindTraceByIDSvc<T> {
                        type Response = super::TraceByIdResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TraceByIdRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Querier>::find_trace_by_id(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindTraceByIDSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tempopb.Querier/SearchRecent" => {
                    #[allow(non_camel_case_types)]
                    struct SearchRecentSvc<T: Querier>(pub Arc<T>);
                    impl<T: Querier> tonic::server::UnaryService<super::SearchRequest>
                    for SearchRecentSvc<T> {
                        type Response = super::SearchResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Querier>::search_recent(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchRecentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tempopb.Querier/SearchBlock" => {
                    #[allow(non_camel_case_types)]
                    struct SearchBlockSvc<T: Querier>(pub Arc<T>);
                    impl<
                        T: Querier,
                    > tonic::server::UnaryService<super::SearchBlockRequest>
                    for SearchBlockSvc<T> {
                        type Response = super::SearchResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchBlockRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Querier>::search_block(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchBlockSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tempopb.Querier/SearchTags" => {
                    #[allow(non_camel_case_types)]
                    struct SearchTagsSvc<T: Querier>(pub Arc<T>);
                    impl<
                        T: Querier,
                    > tonic::server::UnaryService<super::SearchTagsRequest>
                    for SearchTagsSvc<T> {
                        type Response = super::SearchTagsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchTagsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Querier>::search_tags(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchTagsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tempopb.Querier/SearchTagsV2" => {
                    #[allow(non_camel_case_types)]
                    struct SearchTagsV2Svc<T: Querier>(pub Arc<T>);
                    impl<
                        T: Querier,
                    > tonic::server::UnaryService<super::SearchTagsRequest>
                    for SearchTagsV2Svc<T> {
                        type Response = super::SearchTagsV2Response;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchTagsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Querier>::search_tags_v2(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchTagsV2Svc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tempopb.Querier/SearchTagValues" => {
                    #[allow(non_camel_case_types)]
                    struct SearchTagValuesSvc<T: Querier>(pub Arc<T>);
                    impl<
                        T: Querier,
                    > tonic::server::UnaryService<super::SearchTagValuesRequest>
                    for SearchTagValuesSvc<T> {
                        type Response = super::SearchTagValuesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchTagValuesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Querier>::search_tag_values(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchTagValuesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tempopb.Querier/SearchTagValuesV2" => {
                    #[allow(non_camel_case_types)]
                    struct SearchTagValuesV2Svc<T: Querier>(pub Arc<T>);
                    impl<
                        T: Querier,
                    > tonic::server::UnaryService<super::SearchTagValuesRequest>
                    for SearchTagValuesV2Svc<T> {
                        type Response = super::SearchTagValuesV2Response;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchTagValuesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Querier>::search_tag_values_v2(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchTagValuesV2Svc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for QuerierServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "tempopb.Querier";
    impl<T> tonic::server::NamedService for QuerierServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod streaming_querier_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with StreamingQuerierServer.
    #[async_trait]
    pub trait StreamingQuerier: std::marker::Send + std::marker::Sync + 'static {
        /// Server streaming response type for the Search method.
        type SearchStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::SearchResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn search(
            &self,
            request: tonic::Request<super::SearchRequest>,
        ) -> std::result::Result<tonic::Response<Self::SearchStream>, tonic::Status>;
        /// Server streaming response type for the SearchTags method.
        type SearchTagsStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::SearchTagsResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn search_tags(
            &self,
            request: tonic::Request<super::SearchTagsRequest>,
        ) -> std::result::Result<tonic::Response<Self::SearchTagsStream>, tonic::Status>;
        /// Server streaming response type for the SearchTagsV2 method.
        type SearchTagsV2Stream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::SearchTagsV2Response, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn search_tags_v2(
            &self,
            request: tonic::Request<super::SearchTagsRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::SearchTagsV2Stream>,
            tonic::Status,
        >;
        /// Server streaming response type for the SearchTagValues method.
        type SearchTagValuesStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::SearchTagValuesResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn search_tag_values(
            &self,
            request: tonic::Request<super::SearchTagValuesRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::SearchTagValuesStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the SearchTagValuesV2 method.
        type SearchTagValuesV2Stream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::SearchTagValuesV2Response,
                    tonic::Status,
                >,
            >
            + std::marker::Send
            + 'static;
        async fn search_tag_values_v2(
            &self,
            request: tonic::Request<super::SearchTagValuesRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::SearchTagValuesV2Stream>,
            tonic::Status,
        >;
        /// Server streaming response type for the MetricsQueryRange method.
        type MetricsQueryRangeStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::QueryRangeResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn metrics_query_range(
            &self,
            request: tonic::Request<super::QueryRangeRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::MetricsQueryRangeStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the MetricsQueryInstant method.
        type MetricsQueryInstantStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::QueryInstantResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn metrics_query_instant(
            &self,
            request: tonic::Request<super::QueryInstantRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::MetricsQueryInstantStream>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct StreamingQuerierServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> StreamingQuerierServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for StreamingQuerierServer<T>
    where
        T: StreamingQuerier,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/tempopb.StreamingQuerier/Search" => {
                    #[allow(non_camel_case_types)]
                    struct SearchSvc<T: StreamingQuerier>(pub Arc<T>);
                    impl<
                        T: StreamingQuerier,
                    > tonic::server::ServerStreamingService<super::SearchRequest>
                    for SearchSvc<T> {
                        type Response = super::SearchResponse;
                        type ResponseStream = T::SearchStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as StreamingQuerier>::search(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tempopb.StreamingQuerier/SearchTags" => {
                    #[allow(non_camel_case_types)]
                    struct SearchTagsSvc<T: StreamingQuerier>(pub Arc<T>);
                    impl<
                        T: StreamingQuerier,
                    > tonic::server::ServerStreamingService<super::SearchTagsRequest>
                    for SearchTagsSvc<T> {
                        type Response = super::SearchTagsResponse;
                        type ResponseStream = T::SearchTagsStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchTagsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as StreamingQuerier>::search_tags(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchTagsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tempopb.StreamingQuerier/SearchTagsV2" => {
                    #[allow(non_camel_case_types)]
                    struct SearchTagsV2Svc<T: StreamingQuerier>(pub Arc<T>);
                    impl<
                        T: StreamingQuerier,
                    > tonic::server::ServerStreamingService<super::SearchTagsRequest>
                    for SearchTagsV2Svc<T> {
                        type Response = super::SearchTagsV2Response;
                        type ResponseStream = T::SearchTagsV2Stream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchTagsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as StreamingQuerier>::search_tags_v2(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchTagsV2Svc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tempopb.StreamingQuerier/SearchTagValues" => {
                    #[allow(non_camel_case_types)]
                    struct SearchTagValuesSvc<T: StreamingQuerier>(pub Arc<T>);
                    impl<
                        T: StreamingQuerier,
                    > tonic::server::ServerStreamingService<
                        super::SearchTagValuesRequest,
                    > for SearchTagValuesSvc<T> {
                        type Response = super::SearchTagValuesResponse;
                        type ResponseStream = T::SearchTagValuesStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchTagValuesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as StreamingQuerier>::search_tag_values(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchTagValuesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tempopb.StreamingQuerier/SearchTagValuesV2" => {
                    #[allow(non_camel_case_types)]
                    struct SearchTagValuesV2Svc<T: StreamingQuerier>(pub Arc<T>);
                    impl<
                        T: StreamingQuerier,
                    > tonic::server::ServerStreamingService<
                        super::SearchTagValuesRequest,
                    > for SearchTagValuesV2Svc<T> {
                        type Response = super::SearchTagValuesV2Response;
                        type ResponseStream = T::SearchTagValuesV2Stream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchTagValuesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as StreamingQuerier>::search_tag_values_v2(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchTagValuesV2Svc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tempopb.StreamingQuerier/MetricsQueryRange" => {
                    #[allow(non_camel_case_types)]
                    struct MetricsQueryRangeSvc<T: StreamingQuerier>(pub Arc<T>);
                    impl<
                        T: StreamingQuerier,
                    > tonic::server::ServerStreamingService<super::QueryRangeRequest>
                    for MetricsQueryRangeSvc<T> {
                        type Response = super::QueryRangeResponse;
                        type ResponseStream = T::MetricsQueryRangeStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryRangeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as StreamingQuerier>::metrics_query_range(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = MetricsQueryRangeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tempopb.StreamingQuerier/MetricsQueryInstant" => {
                    #[allow(non_camel_case_types)]
                    struct MetricsQueryInstantSvc<T: StreamingQuerier>(pub Arc<T>);
                    impl<
                        T: StreamingQuerier,
                    > tonic::server::ServerStreamingService<super::QueryInstantRequest>
                    for MetricsQueryInstantSvc<T> {
                        type Response = super::QueryInstantResponse;
                        type ResponseStream = T::MetricsQueryInstantStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryInstantRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as StreamingQuerier>::metrics_query_instant(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = MetricsQueryInstantSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for StreamingQuerierServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "tempopb.StreamingQuerier";
    impl<T> tonic::server::NamedService for StreamingQuerierServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod metrics_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MetricsServer.
    #[async_trait]
    pub trait Metrics: std::marker::Send + std::marker::Sync + 'static {
        async fn span_metrics_summary(
            &self,
            request: tonic::Request<super::SpanMetricsSummaryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SpanMetricsSummaryResponse>,
            tonic::Status,
        >;
        async fn query_range(
            &self,
            request: tonic::Request<super::QueryRangeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryRangeResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct MetricsServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MetricsServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MetricsServer<T>
    where
        T: Metrics,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/tempopb.Metrics/SpanMetricsSummary" => {
                    #[allow(non_camel_case_types)]
                    struct SpanMetricsSummarySvc<T: Metrics>(pub Arc<T>);
                    impl<
                        T: Metrics,
                    > tonic::server::UnaryService<super::SpanMetricsSummaryRequest>
                    for SpanMetricsSummarySvc<T> {
                        type Response = super::SpanMetricsSummaryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SpanMetricsSummaryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Metrics>::span_metrics_summary(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SpanMetricsSummarySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/tempopb.Metrics/QueryRange" => {
                    #[allow(non_camel_case_types)]
                    struct QueryRangeSvc<T: Metrics>(pub Arc<T>);
                    impl<
                        T: Metrics,
                    > tonic::server::UnaryService<super::QueryRangeRequest>
                    for QueryRangeSvc<T> {
                        type Response = super::QueryRangeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryRangeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Metrics>::query_range(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = QueryRangeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for MetricsServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "tempopb.Metrics";
    impl<T> tonic::server::NamedService for MetricsServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
