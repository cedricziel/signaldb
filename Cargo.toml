[package]
name = "signaldb"
version = "0.1.0"
edition = "2021"
license = "AGPL-3.0"

rust-version = "1.82.0"

publish = false

[package.metadata.cargo-machete]
ignored = ["cargo-husky"]

[dependencies]
acceptor = { path = "src/acceptor", features = ["testing"] }
common = { path = "src/common" }
router = { path = "src/router" }
writer = { path = "src/writer" }
uuid = { workspace = true }
tempfile = "3.20.0"
hex = "0.4"
futures = "0.3.31"

anyhow.workspace = true
axum.workspace = true

datafusion.workspace = true
arrow-flight.workspace = true

opentelemetry-proto.workspace = true
tonic.workspace = true

tokio.workspace = true

tracing.workspace = true
tracing-subscriber.workspace = true

log.workspace = true

serde_json.workspace = true
figment.workspace = true

object_store.workspace = true

[[example]]
name = "flight_client"
path = "examples/flight_client.rs"

[dev-dependencies]
env_logger = "0.11.5"
querier = { path = "src/querier" }
testcontainers-modules = { workspace = true }

[dev-dependencies.cargo-husky]
version = "1"
default-features = false
features = [
    "precommit-hook",
    "run-cargo-fmt",
    "run-cargo-clippy",
]

[workspace]
resolver = "2"
members = [
    "src/acceptor",
    "src/common",
    "src/querier",
    "src/router",
    "src/signal-producer",
    "src/tempo-api",
    "src/writer",
]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "AGPL-3.0"
rust-version = "1.82.0"

[workspace.dependencies]
acceptor = { path = "src/acceptor", features = ["testing"] }
common = { path = "src/common" }
tempo-api = { path = "src/tempo-api" }
writer = { path = "src/writer" }

async-trait = "0.1.88"
async-stream = "0.3.0"
futures = "0.3.31"

# Use datafusion's reexported dependencies for consistency
datafusion = { version = "47.0.0", default-features = false, features = ["parquet", "nested_expressions", "unicode_expressions"] }
# Use same versions as datafusion for compatibility
arrow-flight = { version = "55.2.0" }
object_store = { version = "0.12.2", features = ["aws", "azure", "gcp"] }

tonic = { version = "0.12.3", features = [
    "transport",
    "channel",
    "codegen",
    "prost",
] }
tonic-build = "0.12.3"
tonic-reflection = "0.12.3"

opentelemetry = "0.29.1"
opentelemetry_sdk = "0.29.0"
opentelemetry-stdout = { version = "0.29.0" }
opentelemetry-otlp = { version = "0.29.0" }
opentelemetry-proto = "0.29.0"
opentelemetry-semantic-conventions = "0.29.0"

tokio = { version = "1.46.1", features = ["rt-multi-thread", "net", "fs", "sync", "time", "macros", "signal", "io-util"] }
tokio-stream = { version = "0.1.17", features = ["sync", "net"] }
tokio-test = "0.4.2"

tracing = "0.1"
tracing-subscriber = "0.3"

log = "0.4"
anyhow = "1.0.98"

# Use the same axum version that tonic depends on
axum = "0.7.9"
tower-http = "0.6.6"

serde = { version = "1.0.219", features = ["derive"] }
serde_json = "1.0.140"
bincode = "1.3"


prost = "0.13"
prost-types = "0.13"
prost-build = "0.13"

thiserror = "2.0.12"

figment = { version = "0.10.19", features = ["toml", "env"] }
once_cell = "1.21.1"

bytes = "1"

mockall = "0.13.1"

uuid = { version = "1.17.0", features = ["serde"] }

humantime-serde = "1.1.1"

hyper = { version = "1.0.1", features = ["server", "http1"] }

hex = "0.4"

testcontainers-modules = { version = "0.12.1", features = ["postgres"] }
tempfile = "3.20.0"

ntest = "0.9.3"

chrono = { version = "0.4", features = ["serde"] }
sqlx = { version = "0.8", default-features = false, features = [
    "postgres",
    "sqlite",
    "any",
    "macros",
    "runtime-tokio-rustls",
    "chrono",
    "uuid",
] }

[profile.dev]
split-debuginfo = "unpacked"
